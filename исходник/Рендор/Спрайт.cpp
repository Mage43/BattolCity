#include "—прайт.h"


#include "Ўейдерна€ѕрограмма.h"
#include "“екстуры2D.h"
#include "–ендор.h"

#include <glm/mat4x4.hpp>
#include <glm/gtc/matrix_transform.hpp>

namespace ƒвижок–ендеринга {
	
	—прайт::—прайт(std::shared_ptr <“екстуры2D> п“екстуры,
		           std::shared_ptr< Ўейдерна€ѕрограмма>пЎейдерна€ѕрограмма,
		           std::string исходный–асположение“екстур,
		     const glm::vec2& позици€,
	         const glm::vec2& размер,
		     const float повород)
		: п_п“екстуры(std::move(п“екстуры))
		, п_пЎейдерна€ѕрограмма(std::move(пЎейдерна€ѕрограмма))
		, п_позици€(позици€)
		, п_размер(размер)
		, п_повород(повород)
	{
        const GLfloat  вершинный оординаты[] = {
        /* 1---2
		   | / |
		   0---3
		*/ 

        //X     Y
         0.f, 0.f, 
         0.f, 1.f, 
         1.f, 1.f,
		 1.f, 0.f
		};

		auto расположение“екстур = п_п“екстуры->получить–асположение“екстур(std::move(исходный–асположение“екстур));


		const GLfloat “екстур оординаты[] = {
			   //U     V	
			   расположение“екстур.—лева¬низуUV.x, расположение“екстур.—лева¬низуUV.y,
			   расположение“екстур.—лева¬низуUV.x, расположение“екстур.ѕраво—верхуUV.y,
			   расположение“екстур.ѕраво—верхуUV.x, расположение“екстур.ѕраво—верхуUV.y,
               расположение“екстур.ѕраво—верхуUV.x, расположение“екстур.—лева¬низуUV.y
			   
		};

		const GLuint индекс[] = {
			0, 1, 2,
			2, 3, 0
		};


		п_вектор оординатыЅуффер.инит(вершинный оординаты, 2 * 4 * sizeof(GLfloat));
		–асположение¬екторЅуфера расположение¬ектор оординаты;
		расположение¬ектор оординаты.добавитьѕоплавок омпоновкиЁлемента(2, false);
		п_¬екторћножество.добавитьЅуфер(п_вектор оординатыЅуффер, расположение¬ектор оординаты);

		п_“екстур оординатыЅуффер.инит(“екстур оординаты, 2 * 4 * sizeof(GLfloat));
		–асположение¬екторЅуфера расположение“екстур оординаты;
		расположение“екстур оординаты.добавитьѕоплавок омпоновкиЁлемента(2, false);
		п_¬екторћножество.добавитьЅуфер(п_“екстур оординатыЅуффер, расположение“екстур оординаты);

		п_индексЅуффер.инит(индекс, 6);

		п_¬екторћножество.разв€зывать();
		п_индексЅуффер.разв€зывать();

	}
	 —прайт::~—прайт()
	{
	}

	void —прайт::отопрожение—пра()const
	{
		п_пЎейдерна€ѕрограмма->вкл();

		glm::mat4 модель(1.f);

		модель = glm::translate(модель, glm::vec3(п_позици€, 0.f));
		модель = glm::translate(модель, glm::vec3(0.5f * п_размер.x, 0.5f * п_размер.y, 0.f));
		модель = glm::rotate(модель, glm::radians(п_повород), glm::vec3(0.f, 0.f, 1.f));
		модель = glm::translate(модель, glm::vec3(-0.5f * п_размер.x, -0.5f * п_размер.y, 0.f));
		модель = glm::scale(модель, glm::vec3(п_размер, 1.f));

		п_пЎейдерна€ѕрограмма->сохранитьћатрицу4("modelMat", модель);

		glActiveTexture(GL_TEXTURE0);
		п_п“екстуры->св€зывать();

		–ендор::рисовать(п_¬екторћножество, п_индексЅуффер, *п_пЎейдерна€ѕрограмма);
		
	}


	void —прайт::сохранитьѕозицию(const glm::vec2& позици€)
	{
		п_позици€ = позици€;

	}


	void —прайт::сохранить–азмер(const glm::vec2& размер)
	{
		п_размер = размер;
	}


	void —прайт::сохранитьѕовород(const  float повород)
	{
		п_повород = повород;

	}


	
}