#include "–есурсныйћенеджер.h"
#include "../–ендор/Ўейдерна€ѕрограмма.h"
#include "../–ендор/“екстуры2D.h"
#include "../–ендор/—прайт.h"
#include "../–ендор/јнимаци€—прайт.h"

#include<sstream>
#include<fstream>
#include<iostream>


#include<rapidjson/document.h>
#include<rapidjson/error/en.h>
#include <windows.h>

#define STB_IMAGE_IMPLEMENTATION
#define STBI_ONLY_PNG
#include "stb_image.h"


 –есурсныйћенеджер::Ўейдерна€ѕрограммаѕлан –есурсныйћенеджер::п_Ўейдерна€ѕрограмма;
 –есурсныйћенеджер::“екстурыѕлан –есурсныйћенеджер::п_“екстур;
 –есурсныйћенеджер::—прайтѕлан –есурсныйћенеджер::п_—прайт;
 –есурсныйћенеджер::јнимаци€—прайтѕлан –есурсныйћенеджер::п_јнимаци€—прайт;
 std::string –есурсныйћенеджер::п_ѕуть;

 void –есурсныйћенеджер::выгрузить¬се–есурсный()
 {
	 п_Ўейдерна€ѕрограмма.clear();
	 п_“екстур.clear();
	 п_—прайт.clear();
	 п_јнимаци€—прайт.clear();
 }

void –есурсныйћенеджер::сохронитьѕуть»сполнимый(const std::string& ѕутьисполнимый)
{
	size_t нашел = ѕутьисполнимый.find_last_of("/\\");
	п_ѕуть = ѕутьисполнимый.substr(0, нашел);
}

 std::string –есурсныйћенеджер:: получить—троку‘айла(const std::string& относительный‘айлаѕути) 
{
	 std::ifstream ф;
	 ф.open(п_ѕуть + "/" + относительный‘айлаѕути.c_str(), std::ios::in | std::ios::binary);
	 if (!ф.is_open())
	 {
		 std::cerr << "ќЎ»Ѕ ј ѕ–» ќ“ –џ¬јЌ»≈ ‘ј…Ћј: "<< относительный‘айлаѕути << std::endl;
		 return std::string{};
	 }


	 std::stringstream буфер;
	 SetConsoleCP(1251);
	 SetConsoleOutputCP(1251);
	 буфер << ф.rdbuf();
	 
	 return буфер.str();
     SetConsoleCP(866);
	 SetConsoleOutputCP(866);
}


 std::shared_ptr< ƒвижок–ендеринга::Ўейдерна€ѕрограмма> –есурсныйћенеджер::загрускаЎедоры(const std::string& »м€Ўедора, const std::string& ¬ершинныйѕуть, const std::string& ‘рагментныйѕуть)
 {
	 std::string ¬ершинныйЎейдер = получить—троку‘айла(¬ершинныйѕуть);
	 if (¬ершинныйЎейдер.empty())
	 {
		 std::cerr << "Ќет ¬ершинный Ўейдер!" << std::endl;
		 return nullptr;
	 }


	 std::string ‘рагментныйЎейдер = получить—троку‘айла(‘рагментныйѕуть);
	 if (‘рагментныйЎейдер.empty())
	 {
		 std::cerr << "Ќет ‘рагментный Ўейдер!" << std::endl;
		 return nullptr;
	 }
	 std::shared_ptr<ƒвижок–ендеринга::Ўейдерна€ѕрограмма>& новыйЎедор = п_Ўейдерна€ѕрограмма.emplace(»м€Ўедора, std::make_shared<ƒвижок–ендеринга::Ўейдерна€ѕрограмма>(¬ершинныйЎейдер, ‘рагментныйЎейдер)).first->second;
	 if (новыйЎедор->воз апел€ции())
	 {
		 return новыйЎедор;
	 }

	 std::cerr << "Ќе копелирулс€ шейдор програма\n "
		 << "¬ершинный" << ¬ершинныйѕуть << "\n"
		 << "‘рагментный" << ‘рагментныйѕуть << std::endl;

	 return nullptr;
 }

 std::shared_ptr< ƒвижок–ендеринга::Ўейдерна€ѕрограмма> –есурсныйћенеджер::получатьЎудоровѕрограмм(const std::string& »м€Ўедора)
 {
	 Ўейдерна€ѕрограммаѕлан::const_iterator им = п_Ўейдерна€ѕрограмма.find(»м€Ўедора);
	 if (им != п_Ўейдерна€ѕрограмма.end())
	 {
		 return им->second;
	 }
	 std::cerr<<"Ќе нашли шейдор програма: "<< »м€Ўедора<< std::endl;

	 return nullptr;
	 
 }


 std::shared_ptr< ƒвижок–ендеринга::“екстуры2D> –есурсныйћенеджер::загруска“екстур(const std::string& »м€“екстур, const std::string& ѕуть“екстуры)
 {
	 int канал = 0;
	 int ширена = 0;
	 int высота = 0;
     stbi_set_flip_vertically_on_load(true);
	unsigned char* пиксель = stbi_load(std::string(п_ѕуть + "/" + ѕуть“екстуры).c_str(), &ширена, &высота, &канал, 0);
	

	if (!пиксель)
	{
		std::cerr << "Ќе загружен фота: " << »м€“екстур << std::endl;
		return nullptr;
	}

	std::shared_ptr< ƒвижок–ендеринга::“екстуры2D>нова€“екстура = п_“екстур.emplace(»м€“екстур, std::make_shared< ƒвижок–ендеринга::“екстуры2D>(ширена, высота, пиксель, канал,
		GL_NEAREST, GL_CLAMP_TO_EDGE)).first->second;
    stbi_image_free(пиксель);
	return нова€“екстура;
 }


 std::shared_ptr< ƒвижок–ендеринга::“екстуры2D> –есурсныйћенеджер::получать“екстуры2D(const std::string& »м€“екстур)
 { 
	 “екстурыѕлан::const_iterator им = п_“екстур.find(»м€“екстур);
	 if (им != п_“екстур.end())
	 {
		 return им->second;
	 }
	 std::cerr << "Ќе нашли текстур : " << »м€“екстур << std::endl;

	 return nullptr;


 }

 std::shared_ptr< ƒвижок–ендеринга::—прайт>–есурсныйћенеджер::загруска—прайт(const std::string& »м€—прайт,
	                                                                 const std::string& »м€“екстур,
	                                                                 const std::string& »м€Ўедора,
	                                                                 const unsigned int спрайтЎирена,
	                                                                 const unsigned int спрайт¬ысота,
	                                                                 const std::string& расположение“екстур»м€ )
 {
	 auto п“екстур = получать“екстуры2D(»м€“екстур);
	 if (!п“екстур)
	 {
		 std::cerr << "Ќе загружен текстуры: " << »м€“екстур<<"в спрайте: "<< »м€—прайт << std::endl;
		 return nullptr;

	 }


	 auto пЎейдор = получатьЎудоровѕрограмм(»м€Ўедора);
	 if (!пЎейдор)
	 {
		 std::cerr << "Ќе загружен шедоров программ: " << »м€Ўедора << "в спрайте: " << »м€—прайт << std::endl;
		 return nullptr;

	 }

	 std::shared_ptr<ƒвижок–ендеринга::—прайт> нова€—прайт = п_—прайт.emplace(»м€“екстур, std::make_shared<ƒвижок–ендеринга::—прайт>(п“екстур, пЎейдор,
		                                                                                                         расположение“екстур»м€,
		                                                                                                         glm::vec2(0.f, 0.f), 
		                                                                                                         glm::vec2(спрайтЎирена, спрайт¬ысота))).first->second;
	 
	 return нова€—прайт;
	 
 }


 std::shared_ptr< ƒвижок–ендеринга::јнимаци€—прайт>–есурсныйћенеджер::загрускајнимаци€—прайт(const std::string& »м€—прайт,
																				   const std::string& »м€“екстур,
																				   const std::string& »м€Ўедора,
																				   const unsigned int спрайтЎирена,
																				   const unsigned int спрайт¬ысота,
																				   const std::string& расположение“екстур»м€)
 {
	 auto п“екстур = получать“екстуры2D(»м€“екстур);

	 if (!п“екстур)
	 {
		 std::cerr << "Ќе загружен текстуры: " << »м€“екстур << "в спрайте: " << »м€—прайт << std::endl;
		 return nullptr;

	 }


	 auto пЎейдор = получатьЎудоровѕрограмм(»м€Ўедора);
	 if (!пЎейдор)
	 {
		 std::cerr << "Ќе загружен шедоров программ: " << »м€Ўедора << "в спрайте: " << »м€—прайт << std::endl;
		 return nullptr;

	 }

	 std::shared_ptr<ƒвижок–ендеринга::јнимаци€—прайт> нова€—прайт = п_јнимаци€—прайт.emplace(»м€—прайт, std::make_shared<ƒвижок–ендеринга::јнимаци€—прайт>(п“екстур, пЎейдор,
																																		 расположение“екстур»м€,
																																		 glm::vec2(0.f, 0.f),
																																		 glm::vec2(спрайтЎирена, спрайт¬ысота))).first->second;

	 return нова€—прайт;

 }



 std::shared_ptr< ƒвижок–ендеринга::—прайт>  –есурсныйћенеджер::получать—прайт(const std::string& »м€—прайт)
 {
	 —прайтѕлан::const_iterator им = п_—прайт.find(»м€—прайт);
	 if (им != п_—прайт.end())
	 {
		 return им->second;
	 }
	 std::cerr << "Ќе нашли спрайт : " << »м€—прайт << std::endl;

	 return nullptr;

 }
 
 std::shared_ptr< ƒвижок–ендеринга::јнимаци€—прайт>–есурсныйћенеджер::получатьјнимаци€—прайт(const std::string& »м€—прайт)
 {
	 auto им = п_јнимаци€—прайт.find(»м€—прайт);
	 if (им != п_јнимаци€—прайт.end())
	 {
		 return им->second;
	 }
	 std::cerr << "Ќе нашли јнимаци€ спрайт : " << »м€—прайт << std::endl;

	 return nullptr;

 }


 std::shared_ptr< ƒвижок–ендеринга::“екстуры2D> –есурсныйћенеджер::загруска“екстурјтлос(std::string »м€“екстур,
	                                                                          std::string ѕуть“екстуры,
	                                                                          std::vector<std::string>расположение“екстур,
	                                                                          const unsigned int расположение“екстурЎирена,
	                                                                          const unsigned int расположение“екстур¬ысота)
 {


	 auto п“екстур = загруска“екстур(std::move(»м€“екстур), std::move(ѕуть“екстуры));
	 if (п“екстур && ѕуть“екстуры =="ресерсы/текстуры/танк.png")
	 {
		 const unsigned int Ўиренатекстуры = п“екстур->ширена();
		 const unsigned int ¬ысотатекстуры = п“екстур->высота();
		 unsigned int текущий–асположение“екстур¬ыкл—охранениеX = 0;
		 unsigned int текущий–асположение“екстур¬ыкл—охранениеY = ¬ысотатекстуры;
		 int a = 0;
		 int f = 0;
		 int t = 0;
		 
		 for (auto& текущий–асположение“екстур»м€ : расположение“екстур)
		 {
			 if (a != 4)
			 {


				 glm::vec2 слева¬низуUV(static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеX) / Ўиренатекстуры,							     static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеY - расположение“екстур¬ысота) / ¬ысотатекстуры);
				 glm::vec2 право—верхуUV(static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеX + расположение“екстурЎирена) / Ўиренатекстуры, static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеY) / ¬ысотатекстуры);
				 п“екстур->добавл€ть–асположение“екстур(std::move(текущий–асположение“екстур»м€), слева¬низуUV, право—верхуUV);


				 текущий–асположение“екстур¬ыкл—охранениеX += 56;

				 ++a;

			 }
			 else if (f != 2)
			 { 
			     a:
			 
				 glm::vec2 слева¬низуUV(static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеX) / Ўиренатекстуры, static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеY - расположение“екстурЎирена) / ¬ысотатекстуры);
				 glm::vec2 право—верхуUV(static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеX + расположение“екстур¬ысота) / Ўиренатекстуры, static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеY) / ¬ысотатекстуры);
				 п“екстур->добавл€ть–асположение“екстур(std::move(текущий–асположение“екстур»м€), слева¬низуUV, право—верхуUV);

				 текущий–асположение“екстур¬ыкл—охранениеY -= 37;
				 
				 ++f;
			 }
			 else
			 {  
				 текущий–асположение“екстур¬ыкл—охранениеX += 90;
				 текущий–асположение“екстур¬ыкл—охранениеY = ¬ысотатекстуры;
				 if (f==2&&t==0)
				 { 
					 t = 1;
					 f = 0; 
					 goto a;
				 }
				 
			 }
			
		 }
	 }
	 else if (п“екстур && ѕуть“екстуры == "ресерсы/текстуры/мир.png")
	 {
		 const unsigned int Ўиренатекстуры = п“екстур->ширена();
		 const unsigned int ¬ысотатекстуры = п“екстур->высота();
		 unsigned int текущий–асположение“екстур¬ыкл—охранениеX = 0;
		 unsigned int текущий–асположение“екстур¬ыкл—охранениеY = ¬ысотатекстуры;

		 for (auto& текущий–асположение“екстур»м€ : расположение“екстур)
		 {
			 if (текущий–асположение“екстур¬ыкл—охранениеX != Ўиренатекстуры)
			 {
				 glm::vec2 слева¬низуUV(static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеX) / Ўиренатекстуры, static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеY - расположение“екстур¬ысота) / ¬ысотатекстуры);
				 glm::vec2 право—верхуUV(static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеX + расположение“екстурЎирена) / Ўиренатекстуры, static_cast<float>(текущий–асположение“екстур¬ыкл—охранениеY) / ¬ысотатекстуры);
				 п“екстур->добавл€ть–асположение“екстур(std::move(текущий–асположение“екстур»м€), слева¬низуUV, право—верхуUV);
			 }
			 if (текущий–асположение“екстур¬ыкл—охранениеX == Ўиренатекстуры)
			 {
				 текущий–асположение“екстур¬ыкл—охранениеX = 0;
				 текущий–асположение“екстур¬ыкл—охранениеY - расположение“екстур¬ысота;
			 }
			 
		 }

	 }
	 return п“екстур;

 }

    
 
 
 bool –есурсныйћенеджер::загрускаJSON–есурсов(const std::string& JSONPѕуть)
 {
	
	 const std::string строкаJSON = получить—троку‘айла(JSONPѕуть);
	 if (строкаJSON.empty())
	 {
		 std::cerr << "Ќет ресурсного файла JSON!" << std::endl;
		 return false;
	 }

	 rapidjson::Document документ;
	
	 rapidjson::ParseResult –езультат—интаксическогојнализа = документ.Parse(строкаJSON.c_str());
	 if (!–езультат—интаксическогојнализа)
	 {
		 std::cerr << "ќшибка синтаксического анализа JSON: " << rapidjson::GetParseError_En(–езультат—интаксическогојнализа.Code())<<"("<< –езультат—интаксическогојнализа.Offset()<<")"<<std::endl;
		 std::cerr << "¬ файла JSON:" << JSONPѕуть << std::endl;
		 return false;
	 } 
	
	 auto шейдор»т =  документ.FindMember("шейдор");
	 if (шейдор»т != документ.MemberEnd())
	 {
		 for (const auto& “екущийшейдер : шейдор»т->value.GetArray())
		 {
			 const std::string им€ = “екущийшейдер["им€"].GetString();
			 const std::string путь_в = “екущийшейдер["путь_в"].GetString();
			 const std::string путь_ф = “екущийшейдер["путь_ф"].GetString();
            загрускаЎедоры(им€, путь_в, путь_ф);
		 }
	 }

	 auto текстурјтлос»т = документ.FindMember("текстурјтлос");
	 if (текстурјтлос»т != документ.MemberEnd())
	 {
		 for (const auto& “екущий“екстурјтлос : текстурјтлос»т->value.GetArray())
		 {
			 const std::string им€ = “екущий“екстурјтлос["им€"].GetString();
			 const std::string путь = “екущий“екстурјтлос["путь"].GetString();
			 const unsigned int расположение“екстурЎирена = “екущий“екстурјтлос["расположение“екстурЎирена"].GetUint();
			 const unsigned int расположение“екстур¬ысота = “екущий“екстурјтлос["расположение“екстур¬ысота"].GetUint();

			 const auto  расположение“екстурћассив = “екущий“екстурјтлос["расположение“анка“екстур»м€"].GetArray();
			 std::vector<std::string>расположение“екстур;
			 расположение“екстур.reserve(расположение“екстурћассив.Size());
			 for (const auto& текущий–асположение“екстур : расположение“екстурћассив)
			 {
				 расположение“екстур.emplace_back(текущий–асположение“екстур.GetString());
			 }
			 загруска“екстурјтлос(им€, путь, std::move(расположение“екстур), расположение“екстурЎирена, расположение“екстур¬ысота);
		 }
	 }
	 auto анимаци€—прайт = документ.FindMember("анимаци€—прайт");
	 if (анимаци€—прайт != документ.MemberEnd())
	 {
		 for (const auto& текущийјнимаци€—прайт : анимаци€—прайт->value.GetArray())
		 {
			 const std::string им€ = текущийјнимаци€—прайт["им€"].GetString();
			 const std::string им€“екстур = текущийјнимаци€—прайт["им€“екстур"].GetString();
			 const std::string им€Ўедоры = текущийјнимаци€—прайт["им€Ўедоры"].GetString();
			 const unsigned int спрайтЎирена = текущийјнимаци€—прайт["спрайтЎирена"].GetUint();
			 const unsigned int спрайт¬ысота = текущийјнимаци€—прайт["спрайт¬ысота"].GetUint();
			 const std::string расположение“екстур»м€ = текущийјнимаци€—прайт["расположение“екстур»м€"].GetString();
			 auto п“анкјнимаци€—прайт = загрускајнимаци€—прайт(им€, им€“екстур, им€Ўедоры, спрайтЎирена, спрайт¬ысота, расположение“екстур»м€);
			 if (!п“анкјнимаци€—прайт)
			 {
				 continue;
			 }

			 const auto  состо€ниећассив = текущийјнимаци€—прайт["состо€ние"].GetArray();
			 for (const auto& текущий—осто€ние : состо€ниећассив)
			 {
				 const std::string им€—осто€ние = текущий—осто€ние["им€—осто€ние"].GetString();
				 std::vector<std::pair<std::string, uint64_t>>кадры;
				 const auto  кадрыћассив = текущий—осто€ние["кадры"].GetArray();
				 кадры.reserve(кадрыћассив.Size());
				 for (const auto& текущий—осто€ние : кадрыћассив)
				 {
					 const std::string расположение“екстур = текущий—осто€ние["расположение“екстур"].GetString();
					 const uint64_t продолжительность = текущий—осто€ние["продолжительность"].GetUint64();
					 кадры.emplace_back(std::pair<std::string, uint64_t>(расположение“екстур, продолжительность));
				 }
				 п“анкјнимаци€—прайт->вставить—осто€ние(им€—осто€ние, std::move(кадры));
			 }
			 
		 }
	 }

	 auto анимаци€—прайт1 = документ.FindMember("анимаци€—прайт1");
	 if (анимаци€—прайт1 != документ.MemberEnd())
	 {
		 for (const auto& текущийјнимаци€—прайт : анимаци€—прайт1->value.GetArray())
		 {
			 const std::string им€ = текущийјнимаци€—прайт["им€"].GetString();
			 const std::string им€“екстур = текущийјнимаци€—прайт["им€“екстур"].GetString();
			 const std::string им€Ўедоры = текущийјнимаци€—прайт["им€Ўедоры"].GetString();
			 const unsigned int спрайтЎирена = текущийјнимаци€—прайт["спрайтЎирена"].GetUint();
			 const unsigned int спрайт¬ысота = текущийјнимаци€—прайт["спрайт¬ысота"].GetUint();
			 const std::string расположение“екстур»м€ = текущийјнимаци€—прайт["расположение“екстур»м€"].GetString();
			 auto п“анкјнимаци€—прайт1 = загрускајнимаци€—прайт(им€, им€“екстур, им€Ўедоры, спрайтЎирена, спрайт¬ысота, расположение“екстур»м€);
			 if (!п“анкјнимаци€—прайт1)
			 {
				 continue;
			 }

			 const auto  состо€ниећассив = текущийјнимаци€—прайт["состо€ние"].GetArray();
			 for (const auto& текущий—осто€ние : состо€ниећассив)
			 {
				 const std::string им€—осто€ние = текущий—осто€ние["им€—осто€ние"].GetString();
				 std::vector<std::pair<std::string, uint64_t>>кадры;
				 const auto  кадрыћассив = текущий—осто€ние["кадры"].GetArray();
				 кадры.reserve(кадрыћассив.Size());
				 for (const auto& текущий—осто€ние : кадрыћассив)
				 {
					 const std::string расположение“екстур = текущий—осто€ние["расположение“екстур"].GetString();
					 const uint64_t продолжительность = текущий—осто€ние["продолжительность"].GetUint64();
					 кадры.emplace_back(std::pair<std::string, uint64_t>(расположение“екстур, продолжительность));
				 }
				 п“анкјнимаци€—прайт1->вставить—осто€ние(им€—осто€ние, std::move(кадры));
			 }

		 }
	 }

	 auto уровень»т = документ.FindMember("уровень");
	 if (уровень»т != документ.MemberEnd())
	 {
		 for (const auto& “екущий”ровеньрјтлос : уровень»т->value.GetArray())
		 {
			 const auto  описание = “екущий”ровеньрјтлос["описание"].GetArray();
			 std::vector<std::string>уровень–€д;
			 уровень–€д.reserve(описание.Size());
			 for (const auto& текущий–€д : описание)
			 {
				 уровень–€д.emplace_back(текущий–€д.GetString());
			 }
			 
		 }
	 }

	 return true;
 }	


 
