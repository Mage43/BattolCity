#include "“анк.h";
#include "../–ендор/јнимаци€—прайт.h"
#include<glm/gtc/matrix_transform.hpp>
#include "../–есерсы/–есурсныйћенеджер.h"

“анк::“анк(std::shared_ptr<–ендор::јнимаци€—прайт> п—прайта, const float скорость, const glm::vec2& позици€)
	: п_ориентаци€(ќриентаци€::¬ерх)
	, п_п—прайта(std::move(п—прайта))
	, п_двигатьс€(false)
	, п_скорость(скорость)
	, п_позици€(позици€)
	, п_сдвинутьс€—ћеста(glm::vec2(0.f, 1.f))
{
	п_п—прайта->сохранитьѕозицию(п_позици€);
}

void “анк::отопрожение“анка()const
{

	п_п—прайта->отопрожение—пра();
}

void “анк::сохранитьќриентаци€Ѕез—прайта(const ќриентаци€ ориентаци€)
{
	if (п_ориентаци€ == ориентаци€)
	{
		return;
	}

	п_ориентаци€ = ориентаци€;
	switch (п_ориентаци€)
	{
	case “анк::ќриентаци€::¬ерх:
		п_сдвинутьс€—ћеста.x = 0.f;
		п_сдвинутьс€—ћеста.y = 1.f;
		break;
	case “анк::ќриентаци€::¬низ:
		п_сдвинутьс€—ћеста.x = 0.f;
		п_сдвинутьс€—ћеста.y = -1.f;
		break;
	case “анк::ќриентаци€::Ћево:
		п_сдвинутьс€—ћеста.x = -1.f;
		п_сдвинутьс€—ћеста.y = 0.f;
		break;
	case “анк::ќриентаци€::ѕраво:
		п_сдвинутьс€—ћеста.x = 1.f;
		п_сдвинутьс€—ћеста.y = 0.f;
		break;
	default:
		break;
	}
}

void “анк::сохранитьќриентаци€(const ќриентаци€ ориентаци€)
{
	if (п_ориентаци€ == ориентаци€)
	{
		return;
	}

	п_ориентаци€ = ориентаци€;
	switch (п_ориентаци€)
	{
	case “анк::ќриентаци€::¬ерх:
		п_п—прайта->сохранить—осто€ние("состо€ние“анка¬ерх");
		п_сдвинутьс€—ћеста.x = 0.f;
		п_сдвинутьс€—ћеста.y = 1.f;
		break;
	case “анк::ќриентаци€::¬низ:
		п_п—прайта->сохранить—осто€ние("состо€ние“анка¬низ");
		п_сдвинутьс€—ћеста.x = 0.f;
		п_сдвинутьс€—ћеста.y = -1.f;
		break;
	case “анк::ќриентаци€::Ћево:
		п_п—прайта->сохранить—осто€ние("состо€ние“анкаЋево");
		п_сдвинутьс€—ћеста.x = -1.f;
		п_сдвинутьс€—ћеста.y = 0.f;
		break;
	case “анк::ќриентаци€::ѕраво:
		п_п—прайта->сохранить—осто€ние("состо€ние“анкаѕраво");
		п_сдвинутьс€—ћеста.x = 1.f;
		п_сдвинутьс€—ћеста.y = 0.f;
		break;
	default:
		break;
	}
}

void “анк::двигатьс€(const bool двигатьс€)
{
	п_двигатьс€ = двигатьс€;
}

void “анк::обновлени€(const uint64_t дельта)
{
	if (п_двигатьс€)
	{
		п_позици€ += дельта * п_скорость * п_сдвинутьс€—ћеста;
		п_п—прайта->сохранитьѕозицию(п_позици€);
		п_п—прайта->ќбновить(дельта);
	}
}

